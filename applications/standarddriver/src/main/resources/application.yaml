spring:
  application:
    name: standarddriver
  datasource:
    base:
      username: root
      password: password
      endpoints:
        cluster:
          writer: localhost
          reader: localhost
        proxy:
          writer: localhost
          reader: localhost
      hikari:
        exception-override-class-name: software.amazon.jdbc.util.HikariCPSQLException
        auto-commit: false
        connectionTimeout: 10000
        idleTimeout: 30000
        maxLifetime: 1800000
        minimumIdle: 3
        maximumPoolSize: 10
    raw:
      direct:
        writer:
          url: jdbc:mysql://${spring.datasource.base.endpoints.cluster.writer}:3306/spring_aurora_failover?sslMode=REQUIRED&requireSSL=true&useSSL=true&socketTimeout=10000&connectTimeout=10000
          username: '${spring.datasource.base.username}'
          password: '${spring.datasource.base.password}'
          hikari:
            exception-override-class-name: '${spring.datasource.base.hikari.exception-override-class-name}'
            autoCommit: '${spring.datasource.base.hikari.auto-commit}'
            connectionTimeout: '${spring.datasource.base.hikari.connectionTimeout}'
            idleTimeout: '${spring.datasource.base.hikari.idleTimeout}'
            maxLifetime: '${spring.datasource.base.hikari.maxLifetime}'
            minimumIdle: '${spring.datasource.base.hikari.minimumIdle}'
            maximumPoolSize: '${spring.datasource.base.hikari.maximumPoolSize}'
            # これでREADER/WRITERの判別はできるはずだけどREADERを2-3分見続けることがある
            connectionTestQuery: 'SELECT CASE WHEN @@innodb_read_only = 0 THEN 1 ELSE 0 END AS `1`'
            read-only: false
        reader:
          url: jdbc:mysql://${spring.datasource.base.endpoints.cluster.reader}:3306/spring_aurora_failover?sslMode=REQUIRED&requireSSL=true&useSSL=true&socketTimeout=10000&connectTimeout=10000
          username: '${spring.datasource.base.username}'
          password: '${spring.datasource.base.password}'
          hikari:
            exception-override-class-name: '${spring.datasource.base.hikari.exception-override-class-name}'
            autoCommit: '${spring.datasource.base.hikari.auto-commit}'
            connectionTimeout: '${spring.datasource.base.hikari.connectionTimeout}'
            idleTimeout: '${spring.datasource.base.hikari.idleTimeout}'
            maxLifetime: '${spring.datasource.base.hikari.maxLifetime}'
            minimumIdle: '${spring.datasource.base.hikari.minimumIdle}'
            maximumPoolSize: '${spring.datasource.base.hikari.maximumPoolSize}'
            connectionTestQuery: 'SELECT CASE WHEN @@innodb_read_only = 1 THEN 1 ELSE 0 END AS `1`'
            read-only: true
      proxy:
        writer:
          url: jdbc:mysql://${spring.datasource.base.endpoints.proxy.writer}:3306/spring_aurora_failover?sslMode=REQUIRED&requireSSL=true&useSSL=true&socketTimeout=10000&connectTimeout=10000
          username: '${spring.datasource.base.username}'
          password: '${spring.datasource.base.password}'
          hikari:
            exception-override-class-name: '${spring.datasource.base.hikari.exception-override-class-name}'
            autoCommit: '${spring.datasource.base.hikari.auto-commit}'
            connectionTimeout: '${spring.datasource.base.hikari.connectionTimeout}'
            idleTimeout: '${spring.datasource.base.hikari.idleTimeout}'
            maxLifetime: '${spring.datasource.base.hikari.maxLifetime}'
            minimumIdle: '${spring.datasource.base.hikari.minimumIdle}'
            maximumPoolSize: '${spring.datasource.base.hikari.maximumPoolSize}'
            connectionTestQuery: 'SELECT CASE WHEN @@innodb_read_only = 0 THEN 1 ELSE 0 END AS `1`'
            read-only: false
        reader:
          url: jdbc:mysql://${spring.datasource.base.endpoints.proxy.reader}:3306/spring_aurora_failover?sslMode=REQUIRED&requireSSL=true&useSSL=true&socketTimeout=10000&connectTimeout=10000
          username: '${spring.datasource.base.username}'
          password: '${spring.datasource.base.password}'
          hikari:
            exception-override-class-name: '${spring.datasource.base.hikari.exception-override-class-name}'
            autoCommit: '${spring.datasource.base.hikari.auto-commit}'
            connectionTimeout: '${spring.datasource.base.hikari.connectionTimeout}'
            idleTimeout: '${spring.datasource.base.hikari.idleTimeout}'
            maxLifetime: '${spring.datasource.base.hikari.maxLifetime}'
            minimumIdle: '${spring.datasource.base.hikari.minimumIdle}'
            maximumPoolSize: '${spring.datasource.base.hikari.maximumPoolSize}'
            connectionTestQuery: 'SELECT CASE WHEN @@innodb_read_only = 1 THEN 1 ELSE 0 END AS `1`'
            read-only: true
    wrapper:
      selfsplit:
        writer:
          url: jdbc:aws-wrapper:mysql://${spring.datasource.base.endpoints.cluster.writer}:3306/spring_aurora_failover?sslMode=REQUIRED&requireSSL=true&useSSL=true&socketTimeout=10000&connectTimeout=10000
          username: '${spring.datasource.base.username}'
          password: '${spring.datasource.base.password}'
          driver-class-name: software.amazon.jdbc.Driver
          hikari:
            exception-override-class-name: '${spring.datasource.base.hikari.exception-override-class-name}'
            autoCommit: '${spring.datasource.base.hikari.auto-commit}'
            connectionTimeout: '${spring.datasource.base.hikari.connectionTimeout}'
            idleTimeout: '${spring.datasource.base.hikari.idleTimeout}'
            maxLifetime: '${spring.datasource.base.hikari.maxLifetime}'
            minimumIdle: '${spring.datasource.base.hikari.minimumIdle}'
            maximumPoolSize: '${spring.datasource.base.hikari.maximumPoolSize}'
            read-only: false
            data-source-properties:
              keepSessionStateOnFailover: true
        reader:
          url: jdbc:aws-wrapper:mysql://${spring.datasource.base.endpoints.cluster.reader}:3306/spring_aurora_failover?sslMode=REQUIRED&requireSSL=true&useSSL=true&socketTimeout=10000&connectTimeout=10000
          username: '${spring.datasource.base.username}'
          password: '${spring.datasource.base.password}'
          driver-class-name: software.amazon.jdbc.Driver
          hikari:
            exception-override-class-name: '${spring.datasource.base.hikari.exception-override-class-name}'
            autoCommit: '${spring.datasource.base.hikari.auto-commit}'
            connectionTimeout: '${spring.datasource.base.hikari.connectionTimeout}'
            idleTimeout: '${spring.datasource.base.hikari.idleTimeout}'
            maxLifetime: '${spring.datasource.base.hikari.maxLifetime}'
            minimumIdle: '${spring.datasource.base.hikari.minimumIdle}'
            maximumPoolSize: '${spring.datasource.base.hikari.maximumPoolSize}'
            read-only: true
            data-source-properties:
              keepSessionStateOnFailover: true
      driversplit:
        url: jdbc:aws-wrapper:mysql://${spring.datasource.base.endpoints.cluster.writer}:3306/spring_aurora_failover?sslMode=REQUIRED&requireSSL=true&useSSL=true&socketTimeout=10000&connectTimeout=10000
        username: '${spring.datasource.base.username}'
        password: '${spring.datasource.base.password}'
        driver-class-name: software.amazon.jdbc.Driver
        hikari:
          exception-override-class-name: '${spring.datasource.base.hikari.exception-override-class-name}'
          autoCommit: '${spring.datasource.base.hikari.auto-commit}'
          connectionTimeout: '${spring.datasource.base.hikari.connectionTimeout}'
          idleTimeout: '${spring.datasource.base.hikari.idleTimeout}'
          maxLifetime: '${spring.datasource.base.hikari.maxLifetime}'
          minimumIdle: '${spring.datasource.base.hikari.minimumIdle}'
          maximumPoolSize: '${spring.datasource.base.hikari.maximumPoolSize}'
          read-only: false
          # data-source-class-name: software.amazon.jdbc.ds.AwsWrapperDataSource
          data-source-properties:
            wrapperPlugins: readWriteSplitting,failover,efm2
            keepSessionStateOnFailover: true
management:
  endpoints:
    web:
      exposure:
        include: 'health,prometheus'
  endpoint:
    metrics:
      enabled: true
    prometheus:
      enabled: true
